services:
  kodus-orchestrator:
    # no M1, NÃO force amd64 (mais lento em emulação)
    container_name: ${GLOBAL_API_CONTAINER_NAME}
    build:
      context: .
      dockerfile: DockerFiles/Dockerfile.dev.small
      args:
        - API_CLOUD_MODE=${API_CLOUD_MODE:-false}
    ports:
      - "${API_PORT}:${API_PORT}"
      - "9229:9229"
    env_file: [.env]
    environment:
      # watchers dentro do container (fs events nem sempre chegam bem no Docker Desktop)
      - CHOKIDAR_USEPOLLING=true
      - API_DEVELOPMENT_MODE=true
    restart: unless-stopped
    volumes:
      # código monta por bind (hot reload)
      - .:/usr/src/app
      # node_modules persiste entre recriações do container
      - node_modules_cache:/usr/src/app/node_modules
      # certs só leitura
      - ./certs:/usr/src/app/certs:ro
    depends_on:
      db_postgres:
        condition: service_healthy
      db_mongodb:
        condition: service_healthy
    # Compose Watch: copia mudanças sem rebuild de imagem
    develop:
      watch:
        - path: ./src
          action: sync
          target: /usr/src/app/src
        - path: ./packages
          action: sync
          target: /usr/src/app/packages
          ignore: ["node_modules/", "dist/"]

  db_postgres:
    image: pgvector/pgvector:pg16   # multi-arch; roda nativo no M1
    container_name: db_postgres
    ports: ["5432:5432"]
    environment:
      POSTGRES_USER: ${API_PG_DB_USERNAME}
      POSTGRES_PASSWORD: ${API_PG_DB_PASSWORD}
      POSTGRES_DB: ${API_PG_DB_DATABASE}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${API_PG_DB_USERNAME} -d ${API_PG_DB_DATABASE}"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

  db_mongodb:
    image: mongo:8      # oficial, multi-arch
    container_name: mongodb
    ports: ["27017:27017"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${API_MG_DB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${API_MG_DB_PASSWORD}
      MONGO_INITDB_DATABASE: ${API_MG_DB_DATABASE}
    volumes:
      - mongodbdata:/data/db
      # se quiser seed inicial: monte scripts .js/.sh em /docker-entrypoint-initdb.d
      # - ./docker/mongodb/initdb:/docker-entrypoint-initdb.d:ro
    healthcheck:
      # readiness com 'mongosh' (ping no admin)
      test: ["CMD-SHELL", "echo 'db.runCommand({ ping: 1 }).ok' | mongosh --quiet mongodb://$${MONGO_INITDB_ROOT_USERNAME}:$${MONGO_INITDB_ROOT_PASSWORD}@localhost:27017/admin | grep -q 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 20s

volumes:
  node_modules_cache: {}
  pgdata: {}
  mongodbdata: {}
