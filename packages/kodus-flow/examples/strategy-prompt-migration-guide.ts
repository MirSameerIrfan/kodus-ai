/**
 * üéØ GUIA DE MIGRA√á√ÉO: PlannerPromptComposer ‚Üí Strategy Prompts
 *
 * Este arquivo mapeia como migrar os m√©todos do PlannerPromptComposer
 * para a nova arquitetura de strategies organizada.
 */

import { StrategyExecutionContext } from '../src/engine/strategies/index.js';

// =============================================================================
// üìä MAPEAMENTO DOS M√âTODOS EXISTENTES
// =============================================================================

/**
 * üìã Mapeamento dos m√©todos do PlannerPromptComposer
 */
export const PlannerPromptComposerMethods = {
    // === M√âTODOS DE COMPOSI√á√ÉO ===
    composePrompt: {
        original:
            'composePrompt(context: PromptCompositionContext): Promise<ComposedPrompt>',
        purpose: 'Compor prompt completo com system + user',
        migration: {
            to: 'StrategyPromptManager.organizePrompt()',
            strategy: 'Reorganizar em m√©todos espec√≠ficos por estrat√©gia',
            status: 'üîÑ Em andamento',
        },
    },

    composeSystemPrompt: {
        original: 'composeSystemPrompt(isReplan?: boolean): string',
        purpose: 'Compor prompt do sistema',
        migration: {
            to: 'ReActPrompts.systemPrompt + ReWooPrompts.plannerSystemPrompt',
            strategy: 'Separar por estrat√©gia (ReAct vs ReWoo)',
            status: '‚úÖ Conclu√≠do',
        },
    },

    composeUserPrompt: {
        original:
            'composeUserPrompt(context: PromptCompositionContext): string',
        purpose: 'Compor prompt do usu√°rio',
        migration: {
            to: 'ReActPrompts.userTaskTemplate() + ReWooPrompts.plannerTaskTemplate()',
            strategy: 'Templates parametriz√°veis por estrat√©gia',
            status: '‚úÖ Conclu√≠do',
        },
    },

    // === M√âTODOS DE FORMATA√á√ÉO ===
    formatAvailableTools: {
        original: 'formatAvailableTools(tools: ToolMetadataForLLM[]): string',
        purpose: 'Formatar lista de ferramentas dispon√≠veis',
        migration: {
            to: 'formatToolParameters() em ReActPrompts + ReWooPrompts',
            strategy: 'Reutilizar l√≥gica de formata√ß√£o existente',
            status: 'üîÑ Em andamento',
        },
    },

    formatToolParametersEnhanced: {
        original:
            'formatToolParametersEnhanced(tool: ToolMetadataForLLM): string',
        purpose: 'Formatar par√¢metros de ferramentas com tipos avan√ßados',
        migration: {
            to: 'formatToolParameters() - 150+ linhas de l√≥gica complexa',
            strategy: 'Migrar m√©todo inteiro para utils compartilhadas',
            status: '‚è≥ Pendente',
            priority: 'HIGH',
            effort: 'M√©dio (2-3h)',
            benefits: 'Reutiliza√ß√£o de formata√ß√£o avan√ßada de tipos',
        },
    },

    formatOutputSchema: {
        original:
            'formatOutputSchema(schema: Record<string, unknown>, toolName?: string): string',
        purpose: 'Formatar schema de sa√≠da JSON para display',
        migration: {
            to: 'createSchemaFormatter() utilit√°rio',
            strategy:
                'Criar utilit√°rio compartilhado para formata√ß√£o de schemas',
            status: '‚è≥ Pendente',
            priority: 'MEDIUM',
            effort: 'Alto (4-5h)',
            benefits: 'Formata√ß√£o inteligente de tipos JSON Schema',
        },
    },

    formatAdditionalContext: {
        original:
            'formatAdditionalContext(additionalContext: Record<string, unknown>): string',
        purpose: 'Formatar contexto adicional (user context, agent identity)',
        migration: {
            to: 'formatAgentContext() em StrategyContextRuntimeManager',
            strategy: 'Integrar com context runtime manager',
            status: 'üîÑ Em andamento',
            priority: 'HIGH',
            effort: 'Baixo (1h)',
            benefits: 'Context enriquecido automaticamente',
        },
    },

    formatReplanContext: {
        original:
            'formatReplanContext(replanContext: Record<string, unknown>): string',
        purpose: 'Formatar contexto de replan com hist√≥rico de execu√ß√£o',
        migration: {
            to: 'Enriquecer StrategyExecutionContext.history',
            strategy: 'Integrar com loadExecutionHistory()',
            status: '‚è≥ Pendente',
            priority: 'MEDIUM',
            effort: 'M√©dio (2h)',
            benefits: 'Hist√≥rico de execu√ß√£o autom√°tico',
        },
    },

    // === M√âTODOS UTILIT√ÅRIOS ===
    getToolUsageInstructions: {
        original: 'getToolUsageInstructions(): string',
        purpose: 'Instru√ß√µes detalhadas de uso de ferramentas',
        migration: {
            to: 'Prompts espec√≠ficos por estrat√©gia',
            strategy: 'Incluir nas se√ß√µes relevantes de cada prompt',
            status: '‚è≥ Pendente',
            priority: 'LOW',
            effort: 'Baixo (30min)',
            benefits: 'Instru√ß√µes contextuais por estrat√©gia',
        },
    },

    getUniversalPlanningPatterns: {
        original: 'getUniversalPlanningPatterns(isReplan?: boolean): string',
        purpose: 'Padr√µes universais de planejamento',
        migration: {
            to: 'ReWooPrompts.plannerSystemPrompt',
            strategy: 'Migrar l√≥gica de planejamento estruturado',
            status: '‚è≥ Pendente',
            priority: 'HIGH',
            effort: 'M√©dio (2h)',
            benefits: 'Padr√µes de planejamento robustos',
        },
    },

    // === M√âTODOS DE CACHE E PERFORMANCE ===
    generateCacheKey: {
        original: 'generateCacheKey(context: PromptCompositionContext): string',
        purpose: 'Gerar chave de cache baseada no contexto',
        migration: {
            to: 'PromptCache em StrategyPromptManager',
            strategy: 'Implementar cache inteligente por estrat√©gia',
            status: '‚è≥ Pendente',
            priority: 'LOW',
            effort: 'Baixo (1h)',
            benefits: 'Cache de prompts para performance',
        },
    },

    estimateTokenCount: {
        original: 'estimateTokenCount(text: string): number',
        purpose: 'Estimar contagem de tokens para custos',
        migration: {
            to: 'estimateTokenCount() em StrategyContextRuntimeManager',
            strategy: 'Integrar com c√°lculo de complexidade',
            status: '‚è≥ Pendente',
            priority: 'LOW',
            effort: 'Baixo (30min)',
            benefits: 'Estimativa de custos autom√°tica',
        },
    },
};

// =============================================================================
// üéØ PLANO DE MIGRA√á√ÉO DETALHADO
// =============================================================================

/**
 * üìã Plano de Migra√ß√£o por Prioridade
 */
export const MigrationPlan = {
    // === FASE 1: M√âTODOS CR√çTICOS (1-2 dias) ===
    phase1: {
        name: 'Migra√ß√£o Cr√≠tica',
        duration: '1-2 dias',
        methods: [
            'formatToolParametersEnhanced', // 150+ linhas, alta reutiliza√ß√£o
            'formatAdditionalContext', // Integra√ß√£o com context runtime
            'composeSystemPrompt', // Base para prompts de estrat√©gia
            'composeUserPrompt', // Templates parametriz√°veis
        ],
        deliverables: [
            '‚úÖ StrategyPromptManager funcional',
            '‚úÖ Context formatting integrado',
            '‚úÖ Prompts b√°sicos por estrat√©gia',
            '‚úÖ Testes de migra√ß√£o b√°sicos',
        ],
    },

    // === FASE 2: M√âTODOS AVAN√áADOS (2-3 dias) ===
    phase2: {
        name: 'Funcionalidades Avan√ßadas',
        duration: '2-3 dias',
        methods: [
            'formatOutputSchema', // Formata√ß√£o avan√ßada de schemas
            'formatReplanContext', // Hist√≥rico de execu√ß√£o
            'getUniversalPlanningPatterns', // Padr√µes de planejamento
            'generateCacheKey', // Cache inteligente
        ],
        deliverables: [
            '‚úÖ Formata√ß√£o completa de tipos',
            '‚úÖ Hist√≥rico de execu√ß√£o',
            '‚úÖ Padr√µes de planejamento robustos',
            '‚úÖ Cache de performance',
        ],
    },

    // === FASE 3: OTIMIZA√á√ïES (1 dia) ===
    phase3: {
        name: 'Otimiza√ß√£o e Limpeza',
        duration: '1 dia',
        methods: [
            'estimateTokenCount', // Estimativa de custos
            'getToolUsageInstructions', // Instru√ß√µes contextuais
            'Performance optimizations', // Otimiza√ß√µes gerais
            'Code cleanup', // Limpeza de c√≥digo
        ],
        deliverables: [
            '‚úÖ Estimativas de custo precisas',
            '‚úÖ Instru√ß√µes otimizadas por contexto',
            '‚úÖ Performance otimizada',
            '‚úÖ C√≥digo limpo e documentado',
        ],
    },
};

// =============================================================================
// üîß UTILIT√ÅRIOS DE MIGRA√á√ÉO
// =============================================================================

/**
 * üõ†Ô∏è Utilit√°rios para facilitar a migra√ß√£o
 */
export class MigrationUtils {
    /**
     * Extrair m√©todo do PlannerPromptComposer
     */
    static extractMethod(
        methodName: keyof typeof PlannerPromptComposerMethods,
        sourceFile: string,
    ) {
        const methodInfo = PlannerPromptComposerMethods[methodName];
        console.log(`üîÑ Extraindo m√©todo: ${methodName}`);
        console.log(`üìç Localiza√ß√£o: ${sourceFile}`);
        console.log(`üéØ Migra√ß√£o: ${methodInfo.migration.to}`);
        console.log(`üìä Status: ${methodInfo.migration.status}`);
        return methodInfo;
    }

    /**
     * Validar compatibilidade de tipos
     */
    static validateTypeCompatibility(
        oldMethod: string,
        newMethod: string,
        oldParams: any[],
        newParams: any[],
    ) {
        const compatibility = {
            parameters: oldParams.length === newParams.length,
            returnType: 'string' === 'string', // Simplificado
            breakingChanges: this.detectBreakingChanges(oldParams, newParams),
        };

        return {
            compatible:
                compatibility.parameters && !compatibility.breakingChanges,
            issues: compatibility.breakingChanges
                ? ['Par√¢metros incompat√≠veis']
                : [],
        };
    }

    /**
     * Detectar mudan√ßas incompat√≠veis
     */
    private static detectBreakingChanges(oldParams: any[], newParams: any[]) {
        // L√≥gica simplificada - em produ√ß√£o seria mais sofisticada
        return oldParams.length !== newParams.length;
    }

    /**
     * Gerar relat√≥rio de migra√ß√£o
     */
    static generateMigrationReport() {
        const totalMethods = Object.keys(PlannerPromptComposerMethods).length;
        const completedMethods = Object.values(
            PlannerPromptComposerMethods,
        ).filter((m) => m.migration.status === '‚úÖ Conclu√≠do').length;
        const inProgressMethods = Object.values(
            PlannerPromptComposerMethods,
        ).filter((m) => m.migration.status === 'üîÑ Em andamento').length;

        return {
            total: totalMethods,
            completed: completedMethods,
            inProgress: inProgressMethods,
            pending: totalMethods - completedMethods - inProgressMethods,
            completionPercentage: Math.round(
                (completedMethods / totalMethods) * 100,
            ),
        };
    }
}

// =============================================================================
// üìä STATUS ATUAL DA MIGRA√á√ÉO
// =============================================================================

/**
 * üìà Relat√≥rio de Progresso Atual
 */
export const CurrentMigrationStatus = {
    timestamp: new Date().toISOString(),
    report: MigrationUtils.generateMigrationReport(),
    nextSteps: [
        '1. ‚úÖ Completar formatToolParametersEnhanced (prioridade alta)',
        '2. üîÑ Integrar formatAdditionalContext com context runtime',
        '3. ‚è≥ Implementar formatOutputSchema como utilit√°rio',
        '4. ‚è≥ Migrar getUniversalPlanningPatterns para ReWoo',
        '5. ‚úÖ Testar integra√ß√£o completa com exemplos',
    ],
    blockers: [
        '‚è≥ Depend√™ncia de types do core (ToolMetadataForLLM)',
        '‚è≥ Necessidade de adaptar interfaces para StrategyExecutionContext',
        '‚è≥ Valida√ß√£o de compatibilidade de tipos entre sistemas',
    ],
    recommendations: [
        'üéØ Focar primeiro nos m√©todos cr√≠ticos (formatToolParametersEnhanced)',
        'üéØ Manter compatibilidade de interfaces durante transi√ß√£o',
        'üéØ Criar testes automatizados para validar migra√ß√£o',
        'üéØ Documentar breaking changes claramente',
    ],
};

// =============================================================================
// üéØ ESTRAT√âGIA DE MIGRA√á√ÉO RECOMENDADA
// =============================================================================

/**
 * üöÄ Estrat√©gia de Migra√ß√£o Recomendada
 */
export const RecommendedMigrationStrategy = {
    approach: 'Incremental Migration',
    phases: {
        phase1: {
            focus: 'Core functionality (80% value)',
            methods: [
                'formatToolParametersEnhanced',
                'formatAdditionalContext',
                'composeSystemPrompt',
                'composeUserPrompt',
            ],
            duration: '2-3 dias',
            risk: 'Low',
            rollback: 'Easy (feature flags)',
        },
        phase2: {
            focus: 'Advanced features (15% value)',
            methods: [
                'formatOutputSchema',
                'formatReplanContext',
                'getUniversalPlanningPatterns',
            ],
            duration: '2-3 dias',
            risk: 'Medium',
            rollback: 'Medium (database migration)',
        },
        phase3: {
            focus: 'Optimizations (5% value)',
            methods: [
                'Performance optimizations',
                'Cache implementation',
                'Code cleanup',
            ],
            duration: '1 dia',
            risk: 'Low',
            rollback: 'Easy',
        },
    },

    successCriteria: [
        '‚úÖ Todos os m√©todos cr√≠ticos migrados',
        '‚úÖ Cobertura de testes > 80%',
        '‚úÖ Performance mantida ou melhorada',
        '‚úÖ Zero breaking changes para usu√°rios',
        '‚úÖ Documenta√ß√£o atualizada',
    ],

    rollbackPlan: {
        featureFlags: 'strategy-migration-enabled',
        database: 'Manter PlannerPromptComposer como fallback',
        monitoring: 'Alertas autom√°ticos de degrada√ß√£o',
        timeline: '7 dias de rollback dispon√≠veis',
    },
};

export default {
    PlannerPromptComposerMethods,
    MigrationPlan,
    MigrationUtils,
    CurrentMigrationStatus,
    RecommendedMigrationStrategy,
};
