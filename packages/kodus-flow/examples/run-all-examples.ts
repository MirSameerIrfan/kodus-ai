/**
 * @file run-all-examples.ts
 * @description Executar todos os exemplos de visualiza√ß√£o de logs
 */

import { usarTimelineViewer } from './use-timeline-viewer.js';
import { usarDebugSystem } from './use-debug-system.js';
import { usarObservabilidadeIntegrada } from './use-integrated-observability.js';

async function executarTodosExemplos() {
    console.log('üöÄ EXECUTANDO TODOS OS EXEMPLOS DE VISUALIZA√á√ÉO DE LOGS');
    console.log('‚ïê'.repeat(80));

    try {
        // 1. Timeline Viewer
        console.log('\n1Ô∏è‚É£ TIMELINE VIEWER');
        console.log('‚îÄ'.repeat(40));
        await usarTimelineViewer();

        // 2. Debug System
        console.log('\n2Ô∏è‚É£ DEBUG SYSTEM');
        console.log('‚îÄ'.repeat(40));
        await usarDebugSystem();

        // 3. Observabilidade Integrada
        console.log('\n3Ô∏è‚É£ OBSERVABILIDADE INTEGRADA');
        console.log('‚îÄ'.repeat(40));
        await usarObservabilidadeIntegrada();

        console.log('\n‚úÖ TODOS OS EXEMPLOS EXECUTADOS COM SUCESSO!');
        console.log('\nüìã RESUMO DO QUE VOC√ä PODE USAR:');
        console.log('‚Ä¢ docker logs kodus-orchestrator -f (logs b√°sicos)');
        console.log('‚Ä¢ createTimelineViewer() (timeline visual)');
        console.log('‚Ä¢ getGlobalDebugSystem() (debug avan√ßado)');
        console.log('‚Ä¢ getIntegratedObservability() (sistema completo)');
    } catch (error) {
        console.error('‚ùå Erro ao executar exemplos:', error);
    }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
    executarTodosExemplos().catch(console.error);
}

export { executarTodosExemplos };
