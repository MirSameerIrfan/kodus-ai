/**
 * üìù GUIA COMPLETO: Como Organizar Prompts por Estrat√©gia
 *
 * Este arquivo demonstra a organiza√ß√£o CORRETA de prompts para:
 * - ReAct Strategy (Reasoning + Acting)
 * - ReWoo Strategy (Reasoning Without Observation)
 */

import { StrategyExecutionContext } from '../src/engine/strategies/index.js';

// =============================================================================
// üéØ ESTRUTURA RECOMENDADA PARA PROMPTS
// =============================================================================

/**
 * üìÅ Estrutura de arquivos recomendada:
 *
 * src/engine/strategies/prompts/
 * ‚îú‚îÄ‚îÄ react/
 * ‚îÇ   ‚îú‚îÄ‚îÄ system-prompt.ts
 * ‚îÇ   ‚îú‚îÄ‚îÄ user-templates.ts
 * ‚îÇ   ‚îú‚îÄ‚îÄ examples.ts
 * ‚îÇ   ‚îî‚îÄ‚îÄ validation.ts
 * ‚îú‚îÄ‚îÄ rewoo/
 * ‚îÇ   ‚îú‚îÄ‚îÄ planner-prompts.ts
 * ‚îÇ   ‚îú‚îÄ‚îÄ executor-prompts.ts
 * ‚îÇ   ‚îú‚îÄ‚îÄ organizer-prompts.ts
 * ‚îÇ   ‚îî‚îÄ‚îÄ examples.ts
 * ‚îî‚îÄ‚îÄ shared/
 *     ‚îú‚îÄ‚îÄ context-formatters.ts
 *     ‚îú‚îÄ‚îÄ tool-descriptions.ts
 *     ‚îî‚îÄ‚îÄ validation-rules.ts
 */

// =============================================================================
// üîÑ REACT STRATEGY PROMPTS
// =============================================================================

/**
 * üéØ ReAct: Prompts para estrat√©gia iterativa
 * Padr√£o: Think ‚Üí Act ‚Üí Observe ‚Üí Repeat
 */
export const ReActPrompts = {
    /**
     * System Prompt Base para ReAct
     * Define o comportamento geral da estrat√©gia
     */
    systemPrompt: `
Voc√™ √© um agente inteligente que usa o padr√£o ReAct (Reasoning + Acting).

SEU PROCESSO DEVE SER:

1. **OBSERVAR** o contexto atual e entrada do usu√°rio
2. **PENSAR** sobre qual √© a melhor a√ß√£o a tomar
3. **AGIR** executando a a√ß√£o escolhida
4. **OBSERVAR** o resultado da a√ß√£o
5. **REPETIR** o ciclo at√© alcan√ßar o objetivo

REGRAS IMPORTANTES:
- Seja conciso mas completo em suas reflex√µes
- Sempre explique seu racioc√≠nio antes de agir
- Use ferramentas apenas quando necess√°rio
- Pare quando alcan√ßar o objetivo ou resposta final
- Admita quando n√£o souber algo

FORMATO DE RESPOSTA:
Pensamento: [Sua an√°lise e racioc√≠nio]
A√ß√£o: [Nome da ferramenta ou "final_answer"]
Par√¢metros: [Se aplic√°vel, em JSON]
    `.trim(),

    /**
     * Template para prompts espec√≠ficos de tarefa
     */
    userTaskTemplate: (context: StrategyExecutionContext) =>
        `
## CONTEXTO DA TAREFA
**Objetivo:** ${context.input}

## FERRAMENTAS DISPON√çVEIS
${context.tools
    .map(
        (tool, index) =>
            `${index + 1}. **${tool.name}**
   - Descri√ß√£o: ${tool.description}
   - Par√¢metros: ${formatToolParameters(tool)}`,
    )
    .join('\n')}

## CONTEXTO ADICIONAL
${formatAgentContext(context.agentContext)}

## HIST√ìRICO DE EXECU√á√ÉO
${
    context.history.length > 0
        ? context.history
              .map(
                  (step, i) =>
                      `**Passo ${i + 1}:** ${step.type.toUpperCase()}
        ${step.thought ? `- Pensamento: ${step.thought.reasoning}` : ''}
        ${step.action ? `- A√ß√£o: ${step.action.type}` : ''}
        ${step.result ? `- Resultado: ${JSON.stringify(step.result.content)}` : ''}`,
              )
              .join('\n\n')
        : 'Nenhum passo executado ainda.'
}

## SUA VEZ
Analise a situa√ß√£o atual e decida qual √© a pr√≥xima a√ß√£o mais apropriada.

Lembre-se:
- Use ferramentas apenas quando necess√°rio
- Seja espec√≠fico nos par√¢metros
- Foque no objetivo principal
- Pare quando tiver a resposta final

Qual √© sua pr√≥xima a√ß√£o?
    `.trim(),

    /**
     * Prompt para reflex√£o intermedi√°ria
     */
    intermediateReflectionPrompt: `
Com base no resultado da a√ß√£o anterior, reflita sobre:

1. **O que foi aprendido?** (dados novos, insights)
2. **O progresso feito** (qu√£o perto estamos do objetivo)
3. **Pr√≥ximos passos necess√°rios** (a√ß√µes adicionais)
4. **Se devemos continuar** (mais a√ß√µes ou resposta final)

Seja objetivo e focado nos fatos observados.
    `.trim(),

    /**
     * Prompt para decis√£o de parada
     */
    finalDecisionPrompt: `
Avalie se voc√™ tem informa√ß√µes suficientes para fornecer uma resposta final:

‚úÖ **SUFICIENTE se:**
- Voc√™ tem todos os dados necess√°rios
- O objetivo foi claramente alcan√ßado
- N√£o h√° mais a√ß√µes produtivas a tomar

‚ùå **INSUFICIENTE se:**
- Ainda falta informa√ß√£o importante
- Mais dados s√£o necess√°rios para completar a tarefa
- H√° passos √≥bvios que ainda n√£o foram executados

Decida: Continuar explorando ou fornecer resposta final?
    `.trim(),
};

// =============================================================================
// üèóÔ∏è REWOO STRATEGY PROMPTS
// =============================================================================

/**
 * üéØ ReWoo: Prompts para estrat√©gia estruturada
 * Padr√£o: Plan ‚Üí Execute ‚Üí Synthesize
 */
export const ReWooPrompts = {
    /**
     * PLANNER: Cria o plano estrat√©gico
     */
    plannerSystemPrompt: `
Voc√™ √© o PLANEJADOR em uma estrat√©gia ReWoo (Reasoning Without Observation).

Sua tarefa √© DECOMPOR problemas complexos em passos independentes execut√°veis.

PROCESSO:
1. **ANALISAR** o objetivo geral
2. **DECOMPOR** em sub-tarefas independentes
3. **IDENTIFICAR** ferramentas necess√°rias para cada sub-tarefa
4. **DEFINIR** par√¢metros e depend√™ncias
5. **CRIAR** plano estruturado

REGRAS IMPORTANTES:
- Cada passo deve ser INDEPENDENTE quando poss√≠vel
- Use ferramentas apropriadas para cada tarefa
- Defina par√¢metros espec√≠ficos e realistas
- Considere depend√™ncias entre passos
- Mantenha passos concisos e focados

N√ÉO EXECUTE a√ß√µes, apenas PLANEJE!
    `.trim(),

    /**
     * Template para planejamento
     */
    plannerTaskTemplate: (context: StrategyExecutionContext) =>
        `
## OBJETIVO GERAL
${context.input}

## FERRAMENTAS DISPON√çVEIS
${context.tools
    .map(
        (tool, index) =>
            `${index + 1}. **${tool.name}**
   - Descri√ß√£o: ${tool.description}
   - Par√¢metros: ${formatToolParameters(tool)}`,
    )
    .join('\n')}

## CONTEXTO ATUAL
${formatAgentContext(context.agentContext)}

## TAREFAS DE PLANEJAMENTO

1. **An√°lise do Objetivo**
   - Que resultado final √© esperado?
   - Quais informa√ß√µes s√£o necess√°rias?
   - Que restri√ß√µes existem?

2. **Decomposi√ß√£o em Passos**
   - Identifique sub-tarefas independentes
   - Agrupe tarefas relacionadas
   - Considere execu√ß√£o paralela quando poss√≠vel

3. **Atribui√ß√£o de Ferramentas**
   - Para cada sub-tarefa, qual ferramenta usar?
   - Quais par√¢metros s√£o necess√°rios?
   - Como os resultados ser√£o usados?

4. **Depend√™ncias e Ordem**
   - Que passos dependem de outros?
   - Qual √© a ordem l√≥gica de execu√ß√£o?
   - H√° paraleliza√ß√£o poss√≠vel?

CRIE UM PLANO DETALHADO seguindo este formato:

**PLANO ESTRUTURADO:**
1. **Passo 1: [Nome descritivo]**
   - Ferramenta: [nome_da_ferramenta]
   - Par√¢metros: [JSON espec√≠fico]
   - Depend√™ncias: [nenhuma | passo X, passo Y]

2. **Passo 2: [Nome descritivo]**
   - Ferramenta: [nome_da_ferramenta]
   - Par√¢metros: [JSON espec√≠fico]
   - Depend√™ncias: [passo 1]
    `.trim(),

    /**
     * EXECUTOR: Executa passos individuais
     */
    executorSystemPrompt: `
Voc√™ √© o EXECUTOR em ReWoo.

Sua tarefa √© EXECUTAR passos individuais do plano usando ferramentas espec√≠ficas.

PROCESSO:
1. **RECEBER** instru√ß√µes espec√≠ficas de um passo
2. **VALIDAR** que tem todos os par√¢metros necess√°rios
3. **EXECUTAR** a ferramenta apropriada
4. **RETORNAR** apenas o resultado da execu√ß√£o

REGRAS IMPORTANTES:
- Execute apenas o passo solicitado
- Use exatamente os par√¢metros fornecidos
- N√£o fa√ßa interpreta√ß√£o adicional
- Retorne apenas dados objetivos
- Foque na execu√ß√£o precisa
    `.trim(),

    /**
     * Template para execu√ß√£o de passo
     */
    executorStepTemplate: (step: any, context: StrategyExecutionContext) =>
        `
## PASSO A EXECUTAR
**Nome:** ${step.name}
**Ferramenta:** ${step.tool}
**Par√¢metros:** ${JSON.stringify(step.parameters, null, 2)}

## CONTEXTO DE EXECU√á√ÉO
${formatAgentContext(context.agentContext)}

## TAREFAS DO EXECUTOR

1. **Validar Par√¢metros**
   - Todos os par√¢metros obrigat√≥rios est√£o presentes?
   - Os valores fazem sentido para a ferramenta?
   - H√° alguma inconsist√™ncia?

2. **Preparar Execu√ß√£o**
   - Formatar par√¢metros corretamente
   - Considerar contexto adicional se necess√°rio
   - Preparar para poss√≠veis erros

3. **Executar Ferramenta**
   - Use a ferramenta especificada
   - Passe os par√¢metros corretos
   - Capture o resultado completo

EXECUTE apenas este passo e retorne o resultado.
    `.trim(),

    /**
     * ORGANIZER: Sintetiza resultados finais
     */
    organizerSystemPrompt: `
Voc√™ √© o ORGANIZADOR FINAL em ReWoo.

Sua tarefa √© SINTETIZAR todos os resultados em uma resposta coerente para o usu√°rio.

PROCESSO:
1. **RECEBER** resultados de todos os passos executados
2. **ANALISAR** dados coletados de cada ferramenta
3. **SINTETIZAR** informa√ß√£o relevante em resposta clara
4. **CITAR** fontes quando apropriado

REGRAS IMPORTANTES:
- Use apenas dados dos resultados fornecidos
- N√£o invente ou assuma informa√ß√µes
- Seja claro e objetivo na resposta
- Cite fontes quando usar dados espec√≠ficos
- Foque no objetivo original do usu√°rio
    `.trim(),

    /**
     * Template para s√≠ntese final
     */
    organizerSynthesisTemplate: (goal: string, results: any[]) =>
        `
## OBJETIVO ORIGINAL
${goal}

## RESULTADOS EXECUTADOS
${results
    .map(
        (result, index) =>
            `**Resultado ${index + 1}: ${result.stepName}**
   - Ferramenta usada: ${result.toolName}
   - Dados retornados: ${JSON.stringify(result.data, null, 2)}
   - Status: ${result.success ? 'Sucesso' : 'Falhou'}
   ${result.error ? `- Erro: ${result.error}` : ''}`,
    )
    .join('\n\n')}

## TAREFAS DE S√çNTESE

1. **An√°lise dos Dados**
   - Que informa√ß√µes foram coletadas?
   - H√° inconsist√™ncias ou gaps?
   - Todos os dados necess√°rios est√£o presentes?

2. **S√≠ntese da Resposta**
   - Combine informa√ß√µes relevantes
   - Foque no objetivo do usu√°rio
   - Seja claro e direto

3. **Formata√ß√£o Final**
   - Estruture de forma l√≥gica
   - Use cita√ß√µes quando apropriado
   - Forne√ßa resposta completa

BASEADO APENAS nos resultados acima, forne√ßa uma resposta final clara e objetiva.
    `.trim(),
};

// =============================================================================
// üîß UTILIT√ÅRIOS PARA FORMATA√á√ÉO
// =============================================================================

/**
 * Formatar par√¢metros de ferramenta para display
 */
function formatToolParameters(tool: any): string {
    if (!tool.parameters?.properties) {
        return 'Nenhum par√¢metro espec√≠fico';
    }

    const params = Object.entries(tool.parameters.properties)
        .map(([name, config]: [string, any]) => {
            const required = tool.parameters?.required?.includes(name)
                ? ' (obrigat√≥rio)'
                : ' (opcional)';
            const type = config.type || 'unknown';
            const desc = config.description ? ` - ${config.description}` : '';
            return `${name}: ${type}${required}${desc}`;
        })
        .join(', ');

    return params || 'Par√¢metros din√¢micos';
}

/**
 * Formatar contexto do agente para display
 */
function formatAgentContext(agentContext: any): string {
    if (!agentContext) return 'Nenhum contexto adicional';

    const contextParts = [];

    if (agentContext.agentName) {
        contextParts.push(`**Agente:** ${agentContext.agentName}`);
    }

    if (agentContext.sessionId) {
        contextParts.push(`**Sess√£o:** ${agentContext.sessionId}`);
    }

    if (agentContext.correlationId) {
        contextParts.push(`**Correla√ß√£o:** ${agentContext.correlationId}`);
    }

    if (agentContext.tenantId) {
        contextParts.push(`**Tenant:** ${agentContext.tenantId}`);
    }

    // Adicionar dados runtime se dispon√≠veis
    if (agentContext.runtime) {
        const runtime = agentContext.runtime;
        if (runtime.kernelState) {
            contextParts.push(`**Estado do Kernel:** ${runtime.kernelState}`);
        }
        if (runtime.memorySize) {
            contextParts.push(`**Mem√≥ria:** ${runtime.memorySize} itens`);
        }
    }

    return contextParts.join('\n');
}

// =============================================================================
// üéØ EXEMPLOS PR√ÅTICOS DE USO
// =============================================================================

/**
 * Exemplos de como usar os prompts organizados
 */
export const PromptUsageExamples = {
    /**
     * Exemplo completo: ReAct para tarefa simples
     */
    reactSimpleTask: (context: StrategyExecutionContext) => ({
        systemPrompt: ReActPrompts.systemPrompt,
        userPrompt: ReActPrompts.userTaskTemplate(context),
        metadata: {
            strategy: 'react',
            complexity: context.metadata.complexity,
            expectedSteps: Math.min(context.metadata.complexity + 1, 5),
        },
    }),

    /**
     * Exemplo completo: ReWoo para tarefa complexa
     */
    rewooComplexTask: (context: StrategyExecutionContext) => ({
        planner: {
            systemPrompt: ReWooPrompts.plannerSystemPrompt,
            userPrompt: ReWooPrompts.plannerTaskTemplate(context),
        },
        executor: {
            systemPrompt: ReWooPrompts.executorSystemPrompt,
            stepTemplate: ReWooPrompts.executorStepTemplate,
        },
        organizer: {
            systemPrompt: ReWooPrompts.organizerSystemPrompt,
            synthesisTemplate: ReWooPrompts.organizerSynthesisTemplate,
        },
        metadata: {
            strategy: 'rewoo',
            complexity: context.metadata.complexity,
            expectedSteps: Math.max(context.metadata.complexity * 2, 3),
        },
    }),

    /**
     * Estrat√©gia de sele√ß√£o autom√°tica baseada na complexidade
     */
    autoSelectStrategy: (context: StrategyExecutionContext) => {
        const complexity = context.metadata.complexity;

        if (complexity >= 5) {
            return PromptUsageExamples.rewooComplexTask(context);
        } else {
            return PromptUsageExamples.reactSimpleTask(context);
        }
    },
};

// =============================================================================
// üìä M√âTRICAS E VALIDA√á√ÉO
// =============================================================================

/**
 * Valida√ß√£o de prompts por estrat√©gia
 */
export const PromptValidation = {
    /**
     * Validar prompt ReAct
     */
    validateReActPrompt: (prompts: any) => {
        const errors = [];

        if (!prompts.systemPrompt?.includes('ReAct')) {
            errors.push('System prompt deve mencionar ReAct');
        }

        if (!prompts.userPrompt?.includes('Pensamento:')) {
            errors.push('User prompt deve incluir formato de pensamento');
        }

        if (!prompts.userPrompt?.includes('A√ß√£o:')) {
            errors.push('User prompt deve incluir formato de a√ß√£o');
        }

        return {
            valid: errors.length === 0,
            errors,
        };
    },

    /**
     * Validar prompt ReWoo
     */
    validateReWooPrompt: (prompts: any) => {
        const errors = [];

        if (!prompts.planner?.systemPrompt?.includes('PLANEJADOR')) {
            errors.push('Planner deve ser identificado como PLANEJADOR');
        }

        if (!prompts.executor?.systemPrompt?.includes('EXECUTOR')) {
            errors.push('Executor deve ser identificado como EXECUTOR');
        }

        if (!prompts.organizer?.systemPrompt?.includes('ORGANIZADOR')) {
            errors.push('Organizer deve ser identificado como ORGANIZADOR');
        }

        return {
            valid: errors.length === 0,
            errors,
        };
    },

    /**
     * M√©tricas de qualidade do prompt
     */
    calculatePromptMetrics: (prompt: string) => {
        return {
            length: prompt.length,
            lines: prompt.split('\n').length,
            hasExamples: prompt.includes('Exemplo'),
            hasRules: prompt.includes('REGRAS') || prompt.includes('RULES'),
            hasStructure: prompt.includes('## ') || prompt.includes('### '),
            clarityScore: calculateClarityScore(prompt),
        };
    },
};

/**
 * Calcular score de clareza do prompt
 */
function calculateClarityScore(prompt: string): number {
    let score = 0;

    // Penalizar prompts muito longos
    if (prompt.length < 500) score += 2;
    else if (prompt.length < 1000) score += 1;

    // Premiar estrutura clara
    if (prompt.includes('## ')) score += 1;
    if (prompt.includes('### ')) score += 1;

    // Premiar exemplos
    if (prompt.includes('Exemplo')) score += 1;

    // Premiar regras claras
    if (prompt.includes('REGRAS') || prompt.includes('RULES')) score += 1;

    // Premiar formata√ß√£o consistente
    const lines = prompt.split('\n');
    const hasConsistentFormatting = lines.every(
        (line) =>
            line.startsWith('## ') ||
            line.startsWith('### ') ||
            line.startsWith('- ') ||
            !line.trim().startsWith('#'),
    );
    if (hasConsistentFormatting) score += 1;

    return Math.min(score, 5); // M√°ximo 5 pontos
}

// =============================================================================
// üéØ RESUMO E RECOMENDA√á√ïES
// =============================================================================

/**
 * üìã Guia R√°pido para Organiza√ß√£o de Prompts
 */
export const PromptOrganizationGuide = {
    /**
     * Estrutura recomendada por estrat√©gia
     */
    structure: {
        react: {
            'system-prompt.ts': 'Prompt base que define o comportamento ReAct',
            'user-templates.ts': 'Templates para diferentes tipos de tarefa',
            'examples.ts': 'Exemplos de uso bem-sucedidos',
            'validation.ts': 'Regras de valida√ß√£o espec√≠ficas',
        },
        rewoo: {
            'planner-prompts.ts': 'Prompts para fase de planejamento',
            'executor-prompts.ts': 'Prompts para execu√ß√£o de passos',
            'organizer-prompts.ts': 'Prompts para s√≠ntese final',
            'examples.ts': 'Exemplos de planos complexos',
        },
    },

    /**
     * Princ√≠pios de organiza√ß√£o
     */
    principles: [
        '‚úÖ Separe prompts por estrat√©gia',
        '‚úÖ Use templates parametriz√°veis',
        '‚úÖ Inclua exemplos claros',
        '‚úÖ Documente constraints',
        '‚úÖ Valide estrutura dos prompts',
        '‚úÖ Mantenha consist√™ncia de formato',
        '‚úÖ Permita personaliza√ß√£o por contexto',
    ],

    /**
     * Benef√≠cios da organiza√ß√£o
     */
    benefits: [
        'üîß Manutenibilidade: F√°cil modificar prompts espec√≠ficos',
        'üéØ Reutiliza√ß√£o: Templates para diferentes contextos',
        'üìä Testabilidade: Valida√ß√£o autom√°tica de estrutura',
        'üöÄ Performance: Cache inteligente de prompts',
        'üë• Colabora√ß√£o: Estrutura clara para equipe',
        'üîç Debugging: Rastreamento f√°cil de problemas',
    ],
};

export default {
    ReActPrompts,
    ReWooPrompts,
    PromptUsageExamples,
    PromptValidation,
    PromptOrganizationGuide,
};
