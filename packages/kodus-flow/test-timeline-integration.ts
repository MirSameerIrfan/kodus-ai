/**
 * Teste de integra√ß√£o do Timeline com Orchestration
 *
 * Este teste verifica se:
 * 1. Timeline √© criado durante execu√ß√£o
 * 2. Orchestration pode acessar timeline
 * 3. Visualiza√ß√£o funciona corretamente
 */

import { createOrchestration } from './src/orchestration/sdk-orchestrator.js';
import { createMockLLMAdapter } from './src/adapters/llm/mock-adapter.js';

async function testTimelineIntegration() {
    console.log('üß™ TESTE: Timeline Integration');
    console.log('='.repeat(50));

    try {
        // 1. Setup
        console.log('1Ô∏è‚É£ Setup do Orchestration...');
        const mockLLM = createMockLLMAdapter();
        const orchestration = createOrchestration({
            llmAdapter: mockLLM,
            enableObservability: true, // ‚úÖ Importante!
            tenantId: 'test-tenant',
        });

        // 2. Criar agente
        console.log('2Ô∏è‚É£ Criando agente...');
        await orchestration.createAgent({
            name: 'testAgent',
            identity: { name: 'TestAgent', role: 'tester' },
        });

        // 3. Executar agente
        console.log('3Ô∏è‚É£ Executando agente...');
        const result = await orchestration.callAgent(
            'testAgent',
            'Teste de timeline integration',
        );

        // 4. Verificar resultado
        console.log('4Ô∏è‚É£ Verificando resultado...');
        if (!result.success) {
            throw new Error(`Execu√ß√£o falhou: ${result.error}`);
        }

        const correlationId = result.context.correlationId;
        console.log('‚úÖ CorrelationId:', correlationId);

        // 5. Verificar se timeline existe
        console.log('5Ô∏è‚É£ Verificando timeline...');
        const hasTimeline = orchestration.hasTimeline(correlationId);
        console.log('‚úÖ Timeline existe:', hasTimeline);

        if (!hasTimeline) {
            throw new Error('Timeline n√£o foi criado!');
        }

        // 6. Obter timeline
        console.log('6Ô∏è‚É£ Obtendo timeline...');
        const timeline = orchestration.getExecutionTimeline(correlationId);
        console.log('‚úÖ Timeline obtido com sucesso!');
        console.log('\nüìä TIMELINE:');
        console.log(timeline);

        // 7. Obter timeline raw
        console.log('7Ô∏è‚É£ Obtendo timeline raw...');
        const rawTimeline = orchestration.getRawTimeline(correlationId);
        if (rawTimeline) {
            console.log('‚úÖ Timeline raw:');
            console.log('- Entries:', rawTimeline.entries.length);
            console.log('- Estado:', rawTimeline.currentState);
            console.log('- Dura√ß√£o:', rawTimeline.totalDuration, 'ms');
            console.log('- Transi√ß√µes:', rawTimeline.transitions.length);
        }

        // 8. Listar execu√ß√µes ativas
        console.log('8Ô∏è‚É£ Listando execu√ß√µes ativas...');
        const activeExecutions = orchestration.getActiveExecutions();
        console.log('‚úÖ Execu√ß√µes ativas:', activeExecutions.length);
        console.log(activeExecutions);

        // 9. Testar export
        console.log('9Ô∏è‚É£ Testando export...');
        const jsonExport = orchestration.exportTimelineJSON(correlationId);
        console.log('‚úÖ JSON export:', jsonExport.substring(0, 100) + '...');

        // 10. Testar relat√≥rio
        console.log('üîü Testando relat√≥rio...');
        const report = orchestration.getExecutionReport(correlationId);
        console.log('‚úÖ Relat√≥rio gerado com sucesso!');

        console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
        console.log('‚úÖ Timeline integration est√° funcionando perfeitamente!');
    } catch (error) {
        console.error('‚ùå ERRO NO TESTE:', error);
        throw error;
    }
}

// Executar teste
if (import.meta.url === `file://${process.argv[1]}`) {
    testTimelineIntegration()
        .then(() => {
            console.log('‚úÖ Teste finalizado com sucesso!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Teste falhou:', error);
            process.exit(1);
        });
}

export { testTimelineIntegration };
